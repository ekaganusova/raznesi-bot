import os
import logging
import asyncio
import traceback 
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_KEY = os.environ.get("OPENAI_KEY")
WEBHOOK_URL = "https://raznesi-bot.onrender.com"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")

# Flask
app = Flask(__name__)

# Telegram
application = Application.builder().token(BOT_TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üî•–ñ–ú–£ –ù–ê –ö–ù–û–ü–ö–£üî•", url="https://t.me/ekaterina_ganusova")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é AI‚ú®, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å. "
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é ‚Äî –∏ —è —É—Å—Ç—Ä–æ—é –µ–π —Ä–∞–∑–Ω–æ—Å –∫–∞–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: –∂—ë—Å—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º –∏ –ø–æ –¥–µ–ª—É.\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é.\n"
        "2. –ü–æ–ª—É—á–∏ —Ä–∞–∑–Ω–æ—Å.\n"
        "3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëáüèª"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        logging.warning("==> –ü–û–õ–£–ß–ï–ù WEBHOOK")

        update = Update.de_json(data, application.bot)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if update.message:
            logging.info(f"–¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø: {update.message.text}")
        elif update.callback_query:
            logging.info(f"CALLBACK: {update.callback_query.data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.run(application.process_update(update))

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ webhook:")
        logging.exception(e)

    return "ok"
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Flask routes
@app.route("/")
def index():
    return "OK"

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        logging.warning("==> –ü–û–õ–£–ß–ï–ù WEBHOOK")
        update = Update.de_json(data, application.bot)
        asyncio.run(application.process_update(update))
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ webhook:")
        logging.error(e)
    return "ok"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
async def setup_webhook():
    logging.warning("==> –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê")
    await application.initialize()
    await application.bot.delete_webhook()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    await application.start()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import threading
    def run():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(setup_webhook())
    threading.Thread(target=run).start()

    app.run(host="0.0.0.0", port=10000)