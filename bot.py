import os
import logging
import asyncio
import traceback
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_KEY = os.environ.get("OPENAI_KEY")
WEBHOOK_URL = "https://raznesi-bot.onrender.com"

# Flask
app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")

# Telegram
application = Application.builder().token(BOT_TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üî•–ñ–ú–£ –ù–ê –ö–ù–û–ü–ö–£üî•", url="https://t.me/ekaterina_ganusova")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é AI‚ú®, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å. "
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é ‚Äî –∏ —è —É—Å—Ç—Ä–æ—é –µ–π —Ä–∞–∑–Ω–æ—Å –∫–∞–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: –∂—ë—Å—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º –∏ –ø–æ –¥–µ–ª—É.\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é.\n"
        "2. –ü–æ–ª—É—á–∏ —Ä–∞–∑–Ω–æ—Å.\n"
        "3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëáüèª",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idea = update.message.text
    logging.info(f"–ü–û–õ–£–ß–ï–ù–û: {idea}")
    try:
        await update.message.reply_text("–û—Ü–µ–Ω–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENAI_KEY)
        response = client.chat.completions.create(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, –ø–æ –¥–µ–ª—É –∏ —Å —é–º–æ—Ä–æ–º."},
                {"role": "user", "content": f"–ò–¥–µ—è: {idea}"}
            ],
            extra_headers={
                "HTTP-Referer": WEBHOOK_URL,
                "X-Title": "raznesi_bot"
            }
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer + "\n\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—â–µ –ø–æ–±–æ–ª—Ç–∞–µ–º? ü§ó")
    except Exception:
        logging.error("GPT –û–®–ò–ë–ö–ê:")
        logging.error(traceback.format_exc())
        await update.message.reply_text("GPT —Å–ª–æ–º–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Webhook –¥–ª—è Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, application.bot)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        loop = application._loop

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ –Ω—ë–º (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –ø–æ—Ç–æ–∫ Flask)
        loop.create_task(application.process_update(update))

    except Exception:
        logging.error("–û—à–∏–±–∫–∞ webhook:")
        logging.error(traceback.format_exc())

    return "ok"
# –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É / (Render Healthcheck)
@app.route("/", methods=["GET", "HEAD"])
def root():
    return "OK", 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
async def setup():
    await application.initialize()
    await application.bot.delete_webhook()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    await application.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # Telegram –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_bot():
        asyncio.run(setup())

    import threading
    threading.Thread(target=run_bot).start()

    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)