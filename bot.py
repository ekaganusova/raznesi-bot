import os
import logging
import asyncio
import traceback
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_KEY = os.environ.get("OPENAI_KEY")
WEBHOOK_URL = "https://raznesi-bot.onrender.com"

# Flask
app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")

# Telegram bot
application = Application.builder().token(BOT_TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî•–ñ–ú–£ –ù–ê –ö–ù–û–ü–ö–£üî•", url="https://t.me/ekaterina_ganusova")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é AI‚ú®, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å. "
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é ‚Äî –∏ —è —É—Å—Ç—Ä–æ—é –µ–π —Ä–∞–∑–Ω–æ—Å –∫–∞–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: –∂—ë—Å—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º –∏ –ø–æ –¥–µ–ª—É.\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é.\n"
        "2. –ü–æ–ª—É—á–∏ —Ä–∞–∑–Ω–æ—Å.\n"
        "3. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëáüèª"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idea = update.message.text
    logging.info(f"–ü–û–õ–£–ß–ï–ù–û: {idea}")
    try:
        await update.message.reply_text("–û—Ü–µ–Ω–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENAI_KEY)
        response = client.chat.completions.create(
            model="openai/gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, –ø–æ –¥–µ–ª—É –∏ —Å —é–º–æ—Ä–æ–º."},
                {"role": "user", "content": f"–ò–¥–µ—è: {idea}"}
            ],
            extra_headers={
                "HTTP-Referer": WEBHOOK_URL,
                "X-Title": "raznesi_bot"
            }
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer + "\n\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—â–µ –ø–æ–±–æ–ª—Ç–∞–µ–º? ü§ó")
    except Exception:
        logging.error(traceback.format_exc())
        await update.message.reply_text("GPT —Å–ª–æ–º–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Telegram routing
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

from flask import Flask, request
from telegram import Update
import asyncio
import logging
import traceback

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# Flask webhook
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, application.bot)

        # –ë–µ–∑ get_event_loop ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π loop
        asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
    except Exception:
        logging.error(traceback.format_exc())
    return "ok"
    
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
async def setup():
    await application.initialize()
    await application.bot.delete_webhook()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    await application.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram
if __name__ == "__main__":
    def run():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(setup())

    import threading
    threading.Thread(target=run).start()

    app.run(host="0.0.0.0", port=10000)